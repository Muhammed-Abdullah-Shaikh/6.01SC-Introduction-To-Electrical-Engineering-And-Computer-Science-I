Search.setIndex({"docnames": ["index", "unit1/designLab1/designLab01Work", "unit1/designLab1/modules", "unit1/designLab2/boundaryBrain", "unit1/designLab2/modules", "unit1/homework/hw1Work", "unit1/homework/modules", "unit1/swLab02/modules", "unit1/swLab02/swLab02WorkPy3", "unit2/designLab03/dynamicMoveToPoint", "unit2/designLab03/ff", "unit2/designLab03/modules", "unit2/designLab03/moveBrain", "unit2/designLab03/secretMessage", "unit2/designLab03/testFF", "unit2/designLab03/testMove"], "filenames": ["index.rst", "unit1/designLab1/designLab01Work.rst", "unit1/designLab1/modules.rst", "unit1/designLab2/boundaryBrain.rst", "unit1/designLab2/modules.rst", "unit1/homework/hw1Work.rst", "unit1/homework/modules.rst", "unit1/swLab02/modules.rst", "unit1/swLab02/swLab02WorkPy3.rst", "unit2/designLab03/dynamicMoveToPoint.rst", "unit2/designLab03/ff.rst", "unit2/designLab03/modules.rst", "unit2/designLab03/moveBrain.rst", "unit2/designLab03/secretMessage.rst", "unit2/designLab03/testFF.rst", "unit2/designLab03/testMove.rst"], "titles": ["Welcome to MIT 6.01SC Introduction To Electrical Engineering And Computer Science I Solutions\u2019s documentation!", "designLab01Work module", "designLab01", "boundaryBrain module", "designLab02", "hw1Work module", "homework", "swLab02", "swLab02WorkPy3 module", "dynamicMoveToPoint module", "ff module", "designLab03", "moveBrain module", "secretMessage module", "testFF module", "testMove module"], "terms": {"swlab02": 0, "swlab02workpy3": [0, 7], "modul": [0, 2, 6, 7, 11], "designlab01": 0, "designlab01work": [0, 2], "designlab02": 0, "mysmclass": [0, 3, 4], "homework": 0, "hw1work": [0, 6], "designlab03": 0, "dynamicmovetopoint": [0, 11], "ff": [0, 11], "movebrain": [0, 11], "secretmessag": [0, 11], "testff": [0, 11], "testmov": [0, 11], "index": [0, 5], "search": 0, "page": 0, "fib": [1, 2], "n": 1, "sourc": [1, 3, 4, 5, 8, 9, 10, 12, 14, 15], "class": [1, 3, 4, 5, 8, 9, 10, 12], "v2": [1, 2], "x": 1, "y": 1, "base": [1, 3, 4, 5, 8, 9, 10, 12], "object": [1, 5, 9, 10, 12], "getx": [1, 2], "geti": [1, 2], "polynomi": [1, 2], "coeffici": 1, "coeff": [1, 2], "i": [1, 3, 4, 5, 8, 9, 10, 12], "add": [1, 2, 5], "other": 1, "mul": [1, 2], "val": [1, 2, 5], "root": [1, 2], "state": [3, 4, 8, 9, 10, 12], "forward": [3, 4, 9], "1": [3, 4, 5], "left": [3, 4, 5], "2": [3, 5, 9], "right": [3, 4, 5], "3": [3, 4, 5], "startstat": [3, 4, 7, 8, 9, 11], "getnextvalu": [3, 4, 7, 8, 9, 10, 11, 12], "inp": [3, 4, 8, 9, 10, 12], "calcul": [3, 4, 9, 10], "next": [3, 4, 8, 9, 10], "valu": [3, 4, 5, 9], "current": [3, 4, 5, 9, 10], "input": [3, 4, 5, 9, 10, 12], "paramet": [3, 4, 5, 9, 10], "The": [3, 4, 5, 9, 10], "robot": [3, 4, 10, 12], "receiv": [3, 4], "from": [3, 4, 5], "": [3, 4, 5, 10, 12], "sensor": [3, 4], "return": [3, 4, 5, 9, 10], "A": [3, 4, 5, 9, 10, 12], "tupl": [3, 4, 9, 10], "contain": [3, 4, 5, 9, 10, 12], "action": [3, 4, 9], "perform": [3, 4, 5, 9], "type": [3, 4, 5, 9, 10], "io": [3, 4, 9, 10, 12], "algorithm": [3, 4], "enumer": [3, 4], "repres": [3, 4, 5, 12], "defin": [3, 4, 8, 10], "fvel": [3, 4], "veloc": [3, 4, 9], "rvel": [3, 4], "rotat": [3, 4, 9], "method": [3, 4, 8], "us": [3, 4], "distanc": [3, 4], "sonar": [3, 4, 12], "detect": [3, 4], "make": [3, 4], "decis": [3, 4], "front_dist": [3, 4], "right_dist": [3, 4], "left_dist": [3, 4], "ar": [3, 4, 5, 10], "minimum": [3, 4], "correspond": [3, 4, 9], "behavior": [3, 4], "determin": [3, 4], "read": [3, 4, 12], "If": [3, 4, 5, 8, 9], "wall": [3, 4], "within": [3, 4], "3m": [3, 4], "rang": [3, 4], "keep": [3, 4], "go": [3, 4], "front": [3, 4], "less": [3, 4], "than": [3, 4], "0": [3, 4, 5, 8, 9], "5": [3, 4, 5], "stop": [3, 4], "side": [3, 4, 5], "min": [3, 4], "close": [3, 4], "turn": [3, 4], "els": [3, 4], "space": [3, 4, 5], "farther": [3, 4], "move": [3, 4, 9], "awai": [3, 4], "plotsonar": 3, "sonarnum": 3, "setup": [3, 11, 12], "brainstart": [3, 11, 12], "step": [3, 9, 11, 12], "brainstop": [3, 11, 12], "shutdown": [3, 11, 12], "boundarybrain": 4, "binaryop": [5, 6], "lazy_ev": [5, 6], "env": 5, "evalu": 5, "lazi": 5, "express": 5, "given": [5, 9], "environ": 5, "ani": 5, "doesn": 5, "t": 5, "number": [5, 6], "simpli": 5, "still": 5, "binari": 5, "oper": 5, "eval": [5, 6], "self": 5, "opstr": [5, 6], "left_val": 5, "right_val": 5, "equival": 5, "sum": [5, 6], "dict": 5, "which": [5, 9, 10, 12], "result": 5, "int": [5, 10], "float": 5, "str": 5, "true": [5, 9], "bool": 5, "option": 5, "whether": 5, "lazili": 5, "default": [5, 8], "op": [5, 6], "b": 5, "same": [5, 8, 9], "prod": [5, 6], "quot": [5, 6], "diff": [5, 6], "assign": [5, 6], "should": [5, 10, 12], "none": 5, "variabl": [5, 6], "name": 5, "doe": [5, 10], "hand": 5, "unevalu": 5, "syntax": 5, "tree": 5, "made": 5, "alreadi": 5, "an": [5, 9, 12], "instanc": [5, 9, 10, 12], "otherwis": [5, 9], "map": 5, "num": 5, "tokenizelegaci": [5, 6], "string": 5, "token": [5, 6], "list": [5, 10], "For": 5, "each": [5, 9, 12], "charect": 5, "check": 5, "sperat": 5, "need": 5, "case": 5, "like": 5, "hi": 5, "33": 5, "777": 5, "charact": 5, "separ": 5, "function": [5, 9], "substr": 5, "start": [5, 9, 10], "end": 5, "just": [5, 10], "befor": 5, "thi": [5, 8], "extract": 5, "strip": 5, "lead": 5, "trail": 5, "ensur": 5, "clean": 5, "addition": 5, "ad": 5, "updat": 5, "posit": [5, 9], "after": [5, 10], "last": 5, "At": 5, "loop": 5, "equal": 5, "mean": 5, "final": [5, 9, 10], "onli": [5, 8], "happn": 5, "when": 5, "follow": 5, "eg": 5, "fred": 5, "georg": 5, "pars": [5, 6], "arithmet": 5, "parsedexp": 5, "exampl": 5, "numbertok": [5, 6], "variabletok": [5, 6], "isnum": [5, 6], "thing": 5, "calc": [5, 6], "calctest": [5, 6], "expr": 5, "testtoken": [5, 6], "testpars": [5, 6], "testev": [5, 6], "testexpr": [5, 6], "z": 5, "6": [5, 9], "w": 5, "answer": 5, "var": 5, "c": [5, 8], "testlazyev": [5, 6], "delay2machin": [7, 8], "runtestsdelai": [7, 8], "commentssm": [7, 8], "runtestscomm": [7, 8], "firstwordsm": [7, 8], "runtestsfw": [7, 8], "val0": 8, "val1": 8, "sm": 8, "version": 8, "subclass": 8, "getnextst": 8, "we": [8, 10], "assum": 8, "output": [8, 10, 12], "machin": [8, 9, 10, 12], "its": [8, 9], "swtch": 9, "sequenti": 9, "fals": 9, "combineddynamicmovetopoint": [9, 11], "provid": 9, "both": 9, "movement": 9, "toward": [9, 12], "point": [9, 10, 12], "time": 9, "take": [9, 10], "two": 9, "item": 9, "first": [9, 10], "util": [9, 10, 12], "second": 9, "sensorinput": [9, 10, 12], "On": [9, 12], "gener": [9, 10], "one": 9, "specifi": 9, "singl": 9, "forwardgain": [9, 11], "rotationgain": [9, 11], "angleep": [9, 11], "05": 9, "distep": [9, 11], "02": 9, "set": 9, "system": 9, "rais": 9, "assertionerror": 9, "length": 9, "element": 9, "explain": 9, "error": 9, "desir": 9, "orient": 9, "It": 9, "done": 9, "zero": 9, "sequentialdynamicmovetopoint": [9, 11], "direct": 9, "stopsm": [9, 11], "switchcondit": [9, 11], "followfigur": [10, 11], "initi": 10, "give": 10, "wai": 10, "sequenc": 10, "linear": 10, "segment": 10, "travers": 10, "job": 10, "out": 10, "until": 10, "actual": 10, "pose": 10, "found": 10, "odometri": [10, 12], "onc": 10, "ha": 10, "gotten": 10, "target": [10, 12], "switch": 10, "etc": 10, "even": 10, "get": 10, "continu": 10, "goalgener": [11, 12], "drive": 12}, "objects": {"": [[3, 0, 0, "-", "boundaryBrain"], [1, 0, 0, "-", "designLab01Work"], [9, 0, 0, "-", "dynamicMoveToPoint"], [10, 0, 0, "-", "ff"], [5, 0, 0, "-", "hw1Work"], [12, 0, 0, "-", "moveBrain"], [13, 0, 0, "-", "secretMessage"], [8, 0, 0, "-", "swLab02WorkPy3"], [14, 0, 0, "-", "testFF"], [15, 0, 0, "-", "testMove"]], "boundaryBrain": [[4, 1, 1, "", "MySMClass"], [3, 1, 1, "", "State"], [3, 4, 1, "", "brainStart"], [3, 4, 1, "", "brainStop"], [3, 4, 1, "", "plotSonar"], [3, 4, 1, "", "setup"], [3, 4, 1, "", "shutdown"], [3, 4, 1, "", "step"]], "boundaryBrain.MySMClass": [[4, 2, 1, "", "getNextValues"], [4, 3, 1, "", "startState"]], "boundaryBrain.State": [[3, 3, 1, "", "forward"], [3, 3, 1, "", "left"], [3, 3, 1, "", "right"]], "designLab01Work": [[1, 1, 1, "", "Polynomial"], [1, 1, 1, "", "V2"], [1, 4, 1, "", "fib"]], "designLab01Work.Polynomial": [[1, 2, 1, "", "add"], [1, 2, 1, "", "coeff"], [1, 2, 1, "", "mul"], [1, 2, 1, "", "roots"], [1, 2, 1, "", "val"]], "designLab01Work.V2": [[1, 2, 1, "", "getX"], [1, 2, 1, "", "getY"]], "dynamicMoveToPoint": [[9, 1, 1, "", "CombinedDynamicMoveToPoint"], [9, 4, 1, "", "DynamicMoveToPoint"], [9, 1, 1, "", "SequentialDynamicMoveToPoint"], [9, 1, 1, "", "StopSM"], [9, 4, 1, "", "switchCondition"]], "dynamicMoveToPoint.CombinedDynamicMoveToPoint": [[9, 3, 1, "", "angleEps"], [9, 3, 1, "", "distEps"], [9, 3, 1, "", "forwardGain"], [9, 2, 1, "", "getNextValues"], [9, 3, 1, "", "rotationGain"], [9, 3, 1, "", "startState"]], "dynamicMoveToPoint.SequentialDynamicMoveToPoint": [[9, 3, 1, "", "angleEps"], [9, 3, 1, "", "distEps"], [9, 3, 1, "", "forwardGain"], [9, 2, 1, "", "getNextValues"], [9, 3, 1, "", "rotationGain"], [9, 3, 1, "", "startState"]], "dynamicMoveToPoint.StopSM": [[9, 2, 1, "", "getNextValues"]], "ff": [[10, 1, 1, "", "FollowFigure"]], "ff.FollowFigure": [[10, 2, 1, "", "getNextValues"]], "hw1Work": [[5, 1, 1, "", "Assign"], [5, 1, 1, "", "BinaryOp"], [5, 1, 1, "", "Diff"], [5, 1, 1, "", "Number"], [5, 1, 1, "", "Prod"], [5, 1, 1, "", "Quot"], [5, 1, 1, "", "Sum"], [5, 1, 1, "", "Variable"], [5, 4, 1, "", "calc"], [5, 4, 1, "", "calcTest"], [5, 4, 1, "", "isNum"], [5, 4, 1, "", "numberTok"], [5, 4, 1, "", "parse"], [5, 4, 1, "", "testEval"], [5, 5, 1, "", "testExprs"], [5, 4, 1, "", "testLazyEval"], [5, 4, 1, "", "testParse"], [5, 4, 1, "", "testTokenize"], [5, 4, 1, "", "tokenize"], [5, 4, 1, "", "tokenizeLegacy"], [5, 4, 1, "", "variableTok"]], "hw1Work.Assign": [[5, 2, 1, "", "eval"], [5, 2, 1, "", "lazy_eval"], [5, 3, 1, "", "opStr"]], "hw1Work.BinaryOp": [[5, 2, 1, "", "eval"], [5, 2, 1, "", "lazy_eval"]], "hw1Work.Diff": [[5, 2, 1, "", "op"], [5, 3, 1, "", "opStr"]], "hw1Work.Number": [[5, 2, 1, "", "eval"]], "hw1Work.Prod": [[5, 2, 1, "", "op"], [5, 3, 1, "", "opStr"]], "hw1Work.Quot": [[5, 2, 1, "", "op"], [5, 3, 1, "", "opStr"]], "hw1Work.Sum": [[5, 2, 1, "", "op"], [5, 3, 1, "", "opStr"]], "hw1Work.Variable": [[5, 2, 1, "", "eval"], [5, 2, 1, "", "lazy_eval"]], "moveBrain": [[12, 1, 1, "", "GoalGenerator"], [12, 4, 1, "", "brainStart"], [12, 4, 1, "", "brainStop"], [12, 4, 1, "", "setup"], [12, 4, 1, "", "shutdown"], [12, 4, 1, "", "step"]], "moveBrain.GoalGenerator": [[12, 2, 1, "", "getNextValues"]], "swLab02WorkPy3": [[8, 1, 1, "", "CommentsSM"], [8, 1, 1, "", "Delay2Machine"], [8, 1, 1, "", "FirstWordSM"], [8, 4, 1, "", "runTestsComm"], [8, 4, 1, "", "runTestsDelay"], [8, 4, 1, "", "runTestsFW"]], "swLab02WorkPy3.CommentsSM": [[8, 2, 1, "", "getNextValues"], [8, 3, 1, "", "startState"]], "swLab02WorkPy3.Delay2Machine": [[8, 2, 1, "", "getNextValues"]], "swLab02WorkPy3.FirstWordSM": [[8, 2, 1, "", "getNextValues"], [8, 3, 1, "", "startState"]], "testFF": [[14, 4, 1, "", "testFF"]], "testMove": [[15, 4, 1, "", "testMove"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"]}, "titleterms": {"welcom": 0, "mit": 0, "6": 0, "01sc": 0, "introduct": 0, "To": 0, "electr": 0, "engin": 0, "And": 0, "comput": 0, "scienc": 0, "i": 0, "solut": 0, "": 0, "document": 0, "content": 0, "indic": 0, "tabl": 0, "designlab01work": 1, "modul": [1, 3, 5, 8, 9, 10, 12, 13, 14, 15], "designlab01": 2, "boundarybrain": 3, "designlab02": 4, "hw1work": 5, "homework": 6, "swlab02": 7, "swlab02workpy3": 8, "dynamicmovetopoint": 9, "ff": 10, "designlab03": 11, "movebrain": 12, "secretmessag": 13, "testff": 14, "testmov": 15}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"Welcome to MIT 6.01SC Introduction To Electrical Engineering And Computer Science I Solutions\u2019s documentation!": [[0, "welcome-to-mit-6-01sc-introduction-to-electrical-engineering-and-computer-science-i-solutions-s-documentation"]], "Contents:": [[0, null]], "Indices and tables": [[0, "indices-and-tables"]], "designLab01Work module": [[1, "module-designLab01Work"]], "designLab01": [[2, "designlab01"]], "boundaryBrain module": [[3, "module-boundaryBrain"]], "designLab02": [[4, "designlab02"]], "hw1Work module": [[5, "module-hw1Work"]], "homework": [[6, "homework"]], "swLab02": [[7, "swlab02"]], "swLab02WorkPy3 module": [[8, "module-swLab02WorkPy3"]], "dynamicMoveToPoint module": [[9, "module-dynamicMoveToPoint"]], "ff module": [[10, "module-ff"]], "designLab03": [[11, "designlab03"]], "moveBrain module": [[12, "module-moveBrain"]], "secretMessage module": [[13, "module-secretMessage"]], "testFF module": [[14, "module-testFF"]], "testMove module": [[15, "module-testMove"]]}, "indexentries": {"polynomial (class in designlab01work)": [[1, "designLab01Work.Polynomial"]], "v2 (class in designlab01work)": [[1, "designLab01Work.V2"]], "add() (designlab01work.polynomial method)": [[1, "designLab01Work.Polynomial.add"]], "coeff() (designlab01work.polynomial method)": [[1, "designLab01Work.Polynomial.coeff"]], "designlab01work": [[1, "module-designLab01Work"]], "fib() (in module designlab01work)": [[1, "designLab01Work.fib"]], "getx() (designlab01work.v2 method)": [[1, "designLab01Work.V2.getX"]], "gety() (designlab01work.v2 method)": [[1, "designLab01Work.V2.getY"]], "module": [[1, "module-designLab01Work"], [3, "module-boundaryBrain"], [5, "module-hw1Work"], [8, "module-swLab02WorkPy3"], [9, "module-dynamicMoveToPoint"], [10, "module-ff"], [12, "module-moveBrain"], [13, "module-secretMessage"], [14, "module-testFF"], [15, "module-testMove"]], "mul() (designlab01work.polynomial method)": [[1, "designLab01Work.Polynomial.mul"]], "roots() (designlab01work.polynomial method)": [[1, "designLab01Work.Polynomial.roots"]], "val() (designlab01work.polynomial method)": [[1, "designLab01Work.Polynomial.val"]], "mysmclass (class in boundarybrain)": [[3, "boundaryBrain.MySMClass"], [4, "boundaryBrain.MySMClass"]], "state (class in boundarybrain)": [[3, "boundaryBrain.State"]], "boundarybrain": [[3, "module-boundaryBrain"]], "brainstart() (in module boundarybrain)": [[3, "boundaryBrain.brainStart"]], "brainstop() (in module boundarybrain)": [[3, "boundaryBrain.brainStop"]], "forward (boundarybrain.state attribute)": [[3, "boundaryBrain.State.forward"]], "getnextvalues() (boundarybrain.mysmclass method)": [[3, "boundaryBrain.MySMClass.getNextValues"], [4, "boundaryBrain.MySMClass.getNextValues"]], "left (boundarybrain.state attribute)": [[3, "boundaryBrain.State.left"]], "plotsonar() (in module boundarybrain)": [[3, "boundaryBrain.plotSonar"]], "right (boundarybrain.state attribute)": [[3, "boundaryBrain.State.right"]], "setup() (in module boundarybrain)": [[3, "boundaryBrain.setup"]], "shutdown() (in module boundarybrain)": [[3, "boundaryBrain.shutdown"]], "startstate (boundarybrain.mysmclass attribute)": [[3, "boundaryBrain.MySMClass.startState"], [4, "boundaryBrain.MySMClass.startState"]], "step() (in module boundarybrain)": [[3, "boundaryBrain.step"]], "assign (class in hw1work)": [[5, "hw1Work.Assign"]], "binaryop (class in hw1work)": [[5, "hw1Work.BinaryOp"]], "diff (class in hw1work)": [[5, "hw1Work.Diff"]], "number (class in hw1work)": [[5, "hw1Work.Number"]], "prod (class in hw1work)": [[5, "hw1Work.Prod"]], "quot (class in hw1work)": [[5, "hw1Work.Quot"]], "sum (class in hw1work)": [[5, "hw1Work.Sum"]], "variable (class in hw1work)": [[5, "hw1Work.Variable"]], "calc() (in module hw1work)": [[5, "hw1Work.calc"]], "calctest() (in module hw1work)": [[5, "hw1Work.calcTest"]], "eval() (hw1work.assign method)": [[5, "hw1Work.Assign.eval"]], "eval() (hw1work.binaryop method)": [[5, "hw1Work.BinaryOp.eval"]], "eval() (hw1work.number method)": [[5, "hw1Work.Number.eval"]], "eval() (hw1work.variable method)": [[5, "hw1Work.Variable.eval"]], "hw1work": [[5, "module-hw1Work"]], "isnum() (in module hw1work)": [[5, "hw1Work.isNum"]], "lazy_eval() (hw1work.assign method)": [[5, "hw1Work.Assign.lazy_eval"]], "lazy_eval() (hw1work.binaryop method)": [[5, "hw1Work.BinaryOp.lazy_eval"]], "lazy_eval() (hw1work.variable method)": [[5, "hw1Work.Variable.lazy_eval"]], "numbertok() (in module hw1work)": [[5, "hw1Work.numberTok"]], "op() (hw1work.diff method)": [[5, "hw1Work.Diff.op"]], "op() (hw1work.prod method)": [[5, "hw1Work.Prod.op"]], "op() (hw1work.quot method)": [[5, "hw1Work.Quot.op"]], "op() (hw1work.sum method)": [[5, "hw1Work.Sum.op"]], "opstr (hw1work.assign attribute)": [[5, "hw1Work.Assign.opStr"]], "opstr (hw1work.diff attribute)": [[5, "hw1Work.Diff.opStr"]], "opstr (hw1work.prod attribute)": [[5, "hw1Work.Prod.opStr"]], "opstr (hw1work.quot attribute)": [[5, "hw1Work.Quot.opStr"]], "opstr (hw1work.sum attribute)": [[5, "hw1Work.Sum.opStr"]], "parse() (in module hw1work)": [[5, "hw1Work.parse"]], "testeval() (in module hw1work)": [[5, "hw1Work.testEval"]], "testexprs (in module hw1work)": [[5, "hw1Work.testExprs"]], "testlazyeval() (in module hw1work)": [[5, "hw1Work.testLazyEval"]], "testparse() (in module hw1work)": [[5, "hw1Work.testParse"]], "testtokenize() (in module hw1work)": [[5, "hw1Work.testTokenize"]], "tokenize() (in module hw1work)": [[5, "hw1Work.tokenize"]], "tokenizelegacy() (in module hw1work)": [[5, "hw1Work.tokenizeLegacy"]], "variabletok() (in module hw1work)": [[5, "hw1Work.variableTok"]], "commentssm (class in swlab02workpy3)": [[8, "swLab02WorkPy3.CommentsSM"]], "delay2machine (class in swlab02workpy3)": [[8, "swLab02WorkPy3.Delay2Machine"]], "firstwordsm (class in swlab02workpy3)": [[8, "swLab02WorkPy3.FirstWordSM"]], "getnextvalues() (swlab02workpy3.commentssm method)": [[8, "swLab02WorkPy3.CommentsSM.getNextValues"]], "getnextvalues() (swlab02workpy3.delay2machine method)": [[8, "swLab02WorkPy3.Delay2Machine.getNextValues"]], "getnextvalues() (swlab02workpy3.firstwordsm method)": [[8, "swLab02WorkPy3.FirstWordSM.getNextValues"]], "runtestscomm() (in module swlab02workpy3)": [[8, "swLab02WorkPy3.runTestsComm"]], "runtestsdelay() (in module swlab02workpy3)": [[8, "swLab02WorkPy3.runTestsDelay"]], "runtestsfw() (in module swlab02workpy3)": [[8, "swLab02WorkPy3.runTestsFW"]], "startstate (swlab02workpy3.commentssm attribute)": [[8, "swLab02WorkPy3.CommentsSM.startState"]], "startstate (swlab02workpy3.firstwordsm attribute)": [[8, "swLab02WorkPy3.FirstWordSM.startState"]], "swlab02workpy3": [[8, "module-swLab02WorkPy3"]], "combineddynamicmovetopoint (class in dynamicmovetopoint)": [[9, "dynamicMoveToPoint.CombinedDynamicMoveToPoint"]], "dynamicmovetopoint() (in module dynamicmovetopoint)": [[9, "dynamicMoveToPoint.DynamicMoveToPoint"]], "sequentialdynamicmovetopoint (class in dynamicmovetopoint)": [[9, "dynamicMoveToPoint.SequentialDynamicMoveToPoint"]], "stopsm (class in dynamicmovetopoint)": [[9, "dynamicMoveToPoint.StopSM"]], "angleeps (dynamicmovetopoint.combineddynamicmovetopoint attribute)": [[9, "dynamicMoveToPoint.CombinedDynamicMoveToPoint.angleEps"]], "angleeps (dynamicmovetopoint.sequentialdynamicmovetopoint attribute)": [[9, "dynamicMoveToPoint.SequentialDynamicMoveToPoint.angleEps"]], "disteps (dynamicmovetopoint.combineddynamicmovetopoint attribute)": [[9, "dynamicMoveToPoint.CombinedDynamicMoveToPoint.distEps"]], "disteps (dynamicmovetopoint.sequentialdynamicmovetopoint attribute)": [[9, "dynamicMoveToPoint.SequentialDynamicMoveToPoint.distEps"]], "dynamicmovetopoint": [[9, "module-dynamicMoveToPoint"]], "forwardgain (dynamicmovetopoint.combineddynamicmovetopoint attribute)": [[9, "dynamicMoveToPoint.CombinedDynamicMoveToPoint.forwardGain"]], "forwardgain (dynamicmovetopoint.sequentialdynamicmovetopoint attribute)": [[9, "dynamicMoveToPoint.SequentialDynamicMoveToPoint.forwardGain"]], "getnextvalues() (dynamicmovetopoint.combineddynamicmovetopoint method)": [[9, "dynamicMoveToPoint.CombinedDynamicMoveToPoint.getNextValues"]], "getnextvalues() (dynamicmovetopoint.sequentialdynamicmovetopoint method)": [[9, "dynamicMoveToPoint.SequentialDynamicMoveToPoint.getNextValues"]], "getnextvalues() (dynamicmovetopoint.stopsm method)": [[9, "dynamicMoveToPoint.StopSM.getNextValues"]], "rotationgain (dynamicmovetopoint.combineddynamicmovetopoint attribute)": [[9, "dynamicMoveToPoint.CombinedDynamicMoveToPoint.rotationGain"]], "rotationgain (dynamicmovetopoint.sequentialdynamicmovetopoint attribute)": [[9, "dynamicMoveToPoint.SequentialDynamicMoveToPoint.rotationGain"]], "startstate (dynamicmovetopoint.combineddynamicmovetopoint attribute)": [[9, "dynamicMoveToPoint.CombinedDynamicMoveToPoint.startState"]], "startstate (dynamicmovetopoint.sequentialdynamicmovetopoint attribute)": [[9, "dynamicMoveToPoint.SequentialDynamicMoveToPoint.startState"]], "switchcondition() (in module dynamicmovetopoint)": [[9, "dynamicMoveToPoint.switchCondition"]], "followfigure (class in ff)": [[10, "ff.FollowFigure"]], "ff": [[10, "module-ff"]], "getnextvalues() (ff.followfigure method)": [[10, "ff.FollowFigure.getNextValues"]], "goalgenerator (class in movebrain)": [[12, "moveBrain.GoalGenerator"]], "brainstart() (in module movebrain)": [[12, "moveBrain.brainStart"]], "brainstop() (in module movebrain)": [[12, "moveBrain.brainStop"]], "getnextvalues() (movebrain.goalgenerator method)": [[12, "moveBrain.GoalGenerator.getNextValues"]], "movebrain": [[12, "module-moveBrain"]], "setup() (in module movebrain)": [[12, "moveBrain.setup"]], "shutdown() (in module movebrain)": [[12, "moveBrain.shutdown"]], "step() (in module movebrain)": [[12, "moveBrain.step"]], "secretmessage": [[13, "module-secretMessage"]], "testff": [[14, "module-testFF"]], "testff() (in module testff)": [[14, "testFF.testFF"]], "testmove": [[15, "module-testMove"]], "testmove() (in module testmove)": [[15, "testMove.testMove"]]}})